##클래스 복습 및 생성자

##클래스란?
객체 지향 프로그래밍의 핵심 개념 중 하나로, 데이터와 함수를 하나의 구조로 묶는 데 사용된다.
클래스를 사용할 때는 보통 멤버 변수와 멤버 함수를 이용하여 사용한다.

##멤버 변수란?
클래스 내에서 사용되는 정의된 데이터를 멤버 변수라고 한다.

##멤버 함수란?
클래스 내/외에서 동작을 정의해둔 것이다.
주로 클래스 내에서는 멤버 함수를 선언만 하고, 밖에서 구현을 한다.
이때 const 멤버 함수를 사용할 경우 함수 내에서 클래스의 멤버 변수 값을 변경할 수 없다.

클래스에서는 접근 제한자로 주로 private,public,protected가 있다.
private를 적용할 경우 class외부에서 해당 멤버 변수/함수를 사용하지 못하고 내부에서만 사용이 가능하다.
public은 class키워드를 사용할 경우 클래스 내부와 외부 둘다 사용 가능하다.
protected는 private와 비슷하지만 추가로 상속받은 클래스에서 또한 사용이 가능하다.
private와 protected는 외부에서 직접적으로 불러오거나 값을 입력하지 못하기 때문에
주로 Setter와 Getter 멤버 함수를 만들어서 사용한다.

클래스 내부/외부에서 클래스의 객체를 사용할 경우 접근 연산자 '.'을 사용하여 함수를 호출할 수 있다.

클래스를 사용할 때 가독성을 높이기 위해 pragma once를 사용하기도 한다.
pragma once란?
함수를 선언하는 부분과 정의하는 부분을 나누는 것을 뜻한다.
보통 헤더파일은 클래스를 선언하는 데 많이 사용한다.

##생성자란?
생성자는 클래스 내부의 함수쪽에 정의되는 함수로 클래스를 통해 객체가 생성될 때, 자동으로 선언된다. 
클래스 내부에서 생성자를 만들지 않을 경우 기본적으로 void형식으로 생성되며 이를 Default Constrictor(기본 생성자)이라 한다.
클래스 내부에서 생성자를 정의할 때 매개변수를 포함시키면 객체의 값을 원하는 값으로 초기화할 수 있으며, 이때 이러한 생성자를 Parameter Constructor이라 한다.
하나의 클래스에 여러 개의 생성자가 정의가 가능하며, 이를 생성자 오버로딩이라고 한다.
생성자 오버로딩을 할 때는 매개변수의 목록이 달라야 한다.

##변환생성자는 하나의 매개변수만 가지고 생성자를 뜻하며, 주로 타입 변환에 사용된다.
이 생성자는 암시적 변환("=")에도 사용이 가능하다.
하지만 코드를 짜는 도중 원치 않는 변환이 발생할 가능성이 높다.
암시적 변환을 막기 위해 'explicit'을 사용하여 직접 호출만 가능하도록 할 수 있다.

##Member Initializer List
생성자 헤더 뒤에 ':'를 사용하여 이용한다.
매개 변수의 값을 바로 변수에 대입할 수 있다.
const 변수를 사용할 때에는 직접 값을 초기화하거나 initializer List에서 초기화를 해야한다.
불필요한 대입을 없애거나 default를 생성할 필요가 없어 코드가 깔끔해지는 장점이 존재한다.

##operator=
C++에서 가장 중요한 것중 하나는 '='와 '=='의 차이점이다.
'='의 의미는 값을 대입한다는 뜻으로 즉 operator=은 객체를 대입하는 역할을 뜻한다.
만약 코드에서 '객체' = '객체'가 나올경우 operator=을 호출하겠다는 것을 의미한다.

##추가 내용 1
non-static인 멤버의 초기화는 선언된 순서대로 정해지므로 선언된 순서대로 초기화를 해야 원하는 결과값을 도출해낼 수 있다.
if (a선언) -> (b선언) ->(b초기화,a초기화)
이러한 코드가 있을 경우 a가 먼저 선언이 되었으므로 같은 줄에서 b를 먼저 초기화하였음에도 a가 먼저 초기화가 된다.
이럴 경우 원하는 결과값과는 다른 결과값을 받을 수 있으므로 주의하여야한다.

##추가 내용 2
코드는 위에서부터 아래로 작동한다.
if (A 함수) -> (B 함수)를 작성하였다고 가정하자.
이때 A 함수에서 B 함수를 호출할 경우 아직 코드가 B 함수를 읽어들이지 못한 상태이다.
B함수를 읽어들이지 못한 상태이므로 코드를 실행할 경우 컴파일 에러가 일어난다.

##추가 내용 3
이를 방지하기 위해 prototype을 사용하기도 한다.
prototype이란 함수를 먼저 선언한 다음 나중에 함수를 정의하는 것을 의미한다.
prototype을 사용할 경우 코드를 읽어들이는 과정에서 함수를 선언해 놓았으므로 미리 정의를 안하더라도 사용이 가능하다.
또한 프로그램의 규모가 커질수록 관리가 어렵기 때문에 prototype을 사용하여 파일을 분리하여 관리하기도 한다.

##추가 내용 4
C++에서 대입식을 다룰 때는 오른쪽부터 읽어들인다.
if a = b = c = 3이라는 식이 있다고 가정하자.
C++에서는 c = 3부터 읽어들인 뒤 = 3을 소멸시켜 a = b = c(=3)로 바꾼다.
그 이후 b = c를 읽어들인 뒤 똑같이 = c를 소멸시키고 a = b(=3)로 바꾼다.
이후 각각의 변수의 값은 모두 3으로 초기화가 된다.
