Point 클래스는 캡슐화 원칙에 따라 데이터 멤버(x, y, count)를 private 영역에 정의함. 
이는 데이터를 직접 변경하는 것을 막고, setC()와 같은 public 멤버 함수를 통해서만 접근하도록 강제함.
정적 멤버는 모든 Point 객체가 공유하는 하나의 변수로 작동함. 
이 변수는 생성자 및 소멸자에서 카운팅되어 현재 존재하는 객체 수를 정확히 기록함.
main 함수에서 new Point[size] 구문을 사용하여 배열 크기만큼의 객체를 힙 영역에 할당함. 
이때 배열의 각 요소에 대해 기본 생성자가 호출됨. 할당 후, 
delete[] p;를 사용하여 배열 전체 메모리를 해제하고, 
이 과정에서 모든 객체의 소멸자를 역순으로 호출함. 이 절차는 메모리 누수를 방지하는 데 필수적임.

(이욱교수님 week4 과제 중)
setC 함수는 좌표가 1에서 99 사이의 유효 범위를 벗어날 경우, 
재귀 호출 방식을 사용하여 사용자에게 값을 다시 입력하도록 요청함. 
이는 프로그램 흐름을 끊지 않고 잘못된 입력에 대응하는 효과적인 방법임.
toString() 함수는 std::ostringstream을 활용하여 출력 형식을 제어함. 
특히 std::setw(2)와 std::setfill('0') 스트림 조작자를 사용하여 
좌표 값이 한 자릿수일 때도 x = 05와 같이 두 자리로 통일된 서식을 갖도록 처리함.

복사 생성자 
복사 생성자는 새로운 객체를 기존의 객체로 초기화할 때 사용됨. 
이미 존재하는 객체와 동일한 상태를 가진 새 인스턴스를 생성하는 목적으로 호출됨. 
예를 들어 Date d2(d1) 또는 Date d2 = d1 구문에서 호출됨. 
개발자가 별도로 정의하지 않아도 컴파일러가 기본 복사 생성자를 제공하나, 
객체가 동적 메모리를 포함하는 경우 깊은 복사를 위해 직접 정의 필요함.
Friend
friend 키워드는 특정 외부 함수나 클래스에게 해당 클래스의 private 및 protected 멤버에 
접근할 수 있는 예외적인 권한을 부여함.
- 주된 목적: 연산자 오버로딩을 구현하여 두 객체의 private 데이터를 직접 연산해야 할 때 주로 사용됨.
- friend로 선언된 함수는 클래스의 멤버 함수가 아님. 
클래스 내부에서 friend로 선언하여 권한을 부여하고, 클래스 외부에서 함수 본체를 정의함. 
예를 들어 Point 두 개를 더하는 add(p1, p2) 함수가 friend로 지정되면, 
p1.x와 p2.x 값을 직접 참조하여 새로운 Point 객체를 생성하는 것이 가능함.
